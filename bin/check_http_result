#!/usr/bin/perl
#
# Nagios plugin implementing remote test setup via ssh, and local result 
# collation and reporting.
# 
# Interface intended to be similar to the standard check_by_ssh.
#

use strict;
use Nagios::Plugin;
use File::Path;
use File::Spec;
use YAML qw(LoadFile);

use Nagios::HTTP::Util;

my $FRESHNESS_FUDGE_SECONDS = 120;
my $VERSION = '0.6.3';
my $RESULT_DIR = '/var/www/nagios-http';

my $np = Nagios::Plugin->new(
  usage => q(Usage: %s -H <hostname> -C <cmd> -n <testname> [--freq <mins>] [--env <var=value>] [-u <posturl>]),
  version => $VERSION,
  url => 'http://www.openfusion.com.au/labs/nagios/',
  blurb => q(This plugin checks asynchronous remote command output submitted via http.),
);

$np->add_arg(
  spec => 'hostname|H=s',
  label => 'ADDRESS',
  help => 'Hostname or ip address on which to execute remote command',
  required => 1,
);
$np->add_arg(
  spec => 'cmd|command|C=s',
  label => 'COMMAND STRING',
  help => 'Command to execute on the remote host',
  required => 1,
);
$np->add_arg(
  spec => 'env|E=s@',
  label => 'VAR=VALUE',
  help => 'Environment variable to set for remote command execution (may repeat)',
);
$np->add_arg(
  spec => 'name|n=s',
  label => 'TESTNAME',
  help => 'Name to use for this test (unique per remote host)',
  required => 1,
);
$np->add_arg(
  spec => 'freq|f=i',
  label => 'FREQUENCY',
  help  => 'How often to run this command on the remote host (in minutes)',
);
$np->add_arg(
  spec => 'minute|mi=s',
  label => 'MINUTES',
  help  => 'When (cron minutes field) to run this command on the remote host',
);
$np->add_arg(
  spec => 'hour|hh=s',
  label => 'HOURS',
  help  => 'When (cron hours field) to run this command on the remote host',
);
$np->add_arg(
  spec => 'dow|dayofweek=s',
  label => 'DOW',
  help  => 'When (cron day-of-week field) to run this command on the remote host',
);
$np->add_arg(
  spec => 'dir|d=s',
  label => 'RESULT_DIR',
  help  => 'Local directory to check for results',
  default => $RESULT_DIR,
);
$np->add_arg(
  spec => 'url|u=s',
  label => 'URL',
  help  => 'URL to which remote results should be posted',
);
$np->add_arg(
  spec => 'log',
  help  => "Log debug output to syslog (implies --verbose)",
);
$np->add_arg(
  spec => 'noop',
  help  => "Run in noop mode i.e. don't actually execute the remote cmd",
);
$np->add_arg(
  spec => 'report-hostname|report|R=s',
  label => 'HOSTNAME',
  help => 'Hostname to use for reporting results (defaults to -H hostname)',
);
$np->getopts;
my $opts = $np->opts;
$np->shortname( uc $opts->name );
my $verbose = $opts->verbose || $opts->noop || $opts->log;

my $hostname = $opts->hostname;
my $report_hostname = $opts->get('report-hostname') || $hostname;

# Setup $logger
my $logger = sub {};
if ($opts->log) {
  require Logger::Syslog; 
  $logger = sub { Logger::Syslog::info( join(' ', @_) ) };
}
elsif ($verbose) {
  $logger = sub { 
    print STDERR '+ ' . join(' ', @_);
    print STDERR "\n" unless substr($_[$#_],-1) eq "\n";
  };
}

$logger->( sprintf "cmd '%s' unescapes to: '%s'", $opts->cmd, unescape($opts->cmd) );

# Execute any `` environment values on the master, so hashes are consistent
my @env;
if ($opts->env && ref $opts->env) {
  for my $e (@{$opts->env}) {
    my ($key, $value) = split /=/, $e, 2;
    if ($value =~ m/^`(.+)`$/) {
      my $result = qx($1);
      $result =~ s/\s+$//;
      push @env, "$key=$result";
    }
    else {
      push @env, $e;
    }
  }
}

my $hash = Nagios::HTTP::Util::gen_hash( 
  cmd       => unescape( $opts->cmd ),
  freq      => $opts->freq, 
  minute    => $opts->minute, 
  hour      => $opts->hour, 
  dow       => $opts->dow, 
  env       => \@env,
  url       => $opts->url,
  logger    => $logger,
);

my $dir = $opts->dir;
die "Invalid results directory '$dir'" unless -d $dir;
$dir = File::Spec->catdir( $dir, $report_hostname );
-d $dir or umask(0007) && mkpath($dir);

my $data_file = File::Spec->catfile( $dir, $opts->name );
my $data = read_data($data_file);

if (! $data) {
  $data = submit_remote_cronjob($opts, $data_file);
}

# If hashes (parameters) have changed, we should resubmit our remote cronjob
elsif ($data->{hash} ne $hash) {
  $logger->( "Hashes differ: local $hash != remote $data->{hash} - attempting refresh" );
  $data = submit_remote_cronjob($opts, $data_file);
}

# Freshness check
elsif (time - $data->{mtime} > $opts->freq * 60 + $FRESHNESS_FUDGE_SECONDS) {
  # Out of date - try resubmitting
  $logger->( "Freshness check failed - attempting refresh" );
  $data = submit_remote_cronjob($opts, $data_file);
  if ($data && time - $data->{mtime} > $opts->freq * 60 + $FRESHNESS_FUDGE_SECONDS) {
    $logger->( "Freshness check still failed - giving up" );
    $np->nagios_die("Results too old (" . (time - $data->{mtime}) . "s) (or clocks wrong?)");
  }
}

elsif ($verbose) {
  $logger->( "Hashes match, checking data file $data_file output" );
}

# Return output, if available
if ($data && $data->{output}) {
  my ($out1, $out2) = ($data->{output} =~ m/^(\S+)\s+(\S+)\s+/);
  $out1 =~ s/\W+//g;
  $out2 =~ s/\W+//g;
  my $code = $Nagios::Plugin::ERRORS{ $out2 };
  $code = $Nagios::Plugin::ERRORS{ $out1 } unless defined $code;
  $code = UNKNOWN unless defined $code;
  $np->nagios_exit( $code, $data->{output} );
}
else {
  $np->nagios_die("No results found.");
}

# -------------------------------------------------------------------------
# Subroutines

sub unescape {
  my $cmd = shift;
  $cmd =~ s/\\(.)/$1/g;
  return $cmd;
}

sub read_data {
  my $data_file = shift;
  return unless -f $data_file;
  return LoadFile( $data_file );
}

# Subroutine to set/refresh remote cronjob 
sub submit_remote_cronjob {
  my ($opts, $data_file) = @_;
  
  my $cmd = $opts->cmd;
  my $name = $opts->name;

  my $remote_cmd = qq(/usr/lib/nagios/plugins/nagios_http_cronjob -n $name -C \\"'$cmd'\\");
  if ($opts->env && @{$opts->env}) {
    $remote_cmd .= " --env $_" foreach @{$opts->env};
  }
  $remote_cmd .= " --hostname " . $hostname;
  $remote_cmd .= " --report-hostname " . $report_hostname 
    if $report_hostname && $report_hostname ne $hostname;
  $remote_cmd .= " --freq "   . $opts->freq   if $opts->freq;
  $remote_cmd .= " --minute " . $opts->minute if $opts->minute;
  $remote_cmd .= " --hour "   . $opts->hour   if $opts->hour;
  $remote_cmd .= " --dow "    . $opts->dow    if $opts->dow;
  $remote_cmd .= " --url "    . $opts->url    if $opts->url;
  $logger->( "Submitting remote cronjob with cmd: $remote_cmd" );
  unless ($opts->noop) {
    my $out = qx(ssh -t $hostname $remote_cmd);
    print $out if $verbose;
  }
  sleep 1;

  # Retest data file
  return read_data($data_file);
}

