#!/usr/bin/perl
#
# Nagios plugin implementing remote test setup via ssh, and local
# result collation and reporting.
# 
# Interface intended to be similar to the standard check_by_ssh.
#

use strict;
use Nagios::Plugin;
use Nagios::HTTP::Util;
use YAML qw(LoadFile);
use File::Path;
use File::Spec;

my $FRESHNESS_FUDGE_SECONDS = 120;

my $np = Nagios::Plugin->new(
  usage => q(Usage: %s -H <hostname> -C <cmd> -n <testname> [--freq <mins>] [-d <resultdir>] [-u <posturl>]),
  version => '0.01',
  url => 'http://www.openfusion.com.au/labs/nagios/',
  blurb => q(This plugin checks remote command output via http.),
);

$np->add_arg(
  spec => 'hostname|H=s',
  label => 'ADDRESS',
  help => 'Hostname or ip address',
  required => 1,
);
$np->add_arg(
  spec => 'cmd|command|C=s',
  label => 'COMMAND STRING',
  help => 'Command to execute on the remote host',
  required => 1,
);
$np->add_arg(
  spec => 'name|n=s',
  label => 'TESTNAME',
  help => 'Name to use for this test (unique per remote host)',
  required => 1,
);
$np->add_arg(
  spec => 'freq|f=i',
  label => 'MINUTES',
  help  => 'How often to run this command on the remote host (in minutes)',
  default => 5,
);
$np->add_arg(
  spec => 'dir|d=s',
  label => 'RESULT_DIR',
  help  => 'Local directory to check for results',
  default => '/var/www/nagios-http',
);
$np->add_arg(
  spec => 'url|u=s',
  label => 'URL',
  help  => 'URL to which remote results should be posted (may repeat)',
  default => 'http://nagios/nagios-http',
);
$np->add_arg(
  spec => 'remote_hostname|remote-hostname|=s',
  help  => 'Hostname remote host should use when submitting results',
);
$np->getopts;
$np->shortname( uc $np->opts->name );

print STDERR "\n" if $np->opts->verbose;

my $hash = Nagios::HTTP::Util::gen_hash( 
  cmd => unescape($np->opts->cmd), freq => $np->opts->freq, verbose => $np->opts->verbose );

my $dir = $np->opts->dir;
die "Invalid results directory '$dir'" unless -d $dir;
$dir = File::Spec->catdir( $dir, $np->opts->hostname );
-d $dir or umask(0007) && mkpath($dir);

my $data_file = File::Spec->catfile( $dir, $np->opts->name );

my $data = fetch_data($data_file);

if (! $data) {
  $data = submit_remote_cronjob($np->opts, $data_file);
}

# If hashes (parameters) have changed, we should resubmit our remote cronjob
elsif ($data->{hash} ne $hash) {
  print STDERR "+ Hashes differ: local $hash != remote $data->{hash} - attempting refresh\n" 
    if $np->opts->verbose;
  $data = submit_remote_cronjob($np->opts, $data_file);
}

# Freshness check
elsif (time - $data->{mtime} > $np->opts->freq * 60 + $FRESHNESS_FUDGE_SECONDS) {
  # Out of date - try resubmitting
  print STDERR "+ Freshness check failed - attempting refresh\n"
    if $np->opts->verbose;
  $data = submit_remote_cronjob($np->opts, $data_file);
  if ($data && time - $data->{mtime} > $np->opts->freq * 60 + $FRESHNESS_FUDGE_SECONDS) {
    print STDERR "+ Freshness check still failed - giving up\n"
      if $np->opts->verbose;
    $np->nagios_die("Results too old (" . (time - $data->{mtime}) . "s) (or clocks wrong?)");
  }
}

# Return output, if available
print STDERR "\n" if $np->opts->verbose;
if ($data && $data->{output}) {
  my ($out1, $out2) = ($data->{output} =~ m/^(\S+)\s+(\S+)\s+/);
  $out1 =~ s/\W+//g;
  $out2 =~ s/\W+//g;
  my $code = $Nagios::Plugin::ERRORS{ $out2 };
  $code = $Nagios::Plugin::ERRORS{ $out1 } unless defined $code;
  $code = UNKNOWN unless defined $code;
  $np->nagios_exit( $code, $data->{output} );
}
else {
  $np->nagios_die("No results found.");
}

# -------------------------------------------------------------------------
# Subroutines

sub unescape {
  my $cmd = shift;
  $cmd =~ s/\\([\\"'])/$1/g;
  return $cmd;
}

sub fetch_data {
  my $data_file = shift;
  return unless -f $data_file;
  return LoadFile( $data_file );
}

# Subroutine to set/refresh remote cronjob 
sub submit_remote_cronjob {
  my ($opts, $data_file) = @_;
  
  my $hostname = $opts->hostname;
  my $cmd = $opts->cmd;
  my $name = $opts->name;

  my $remote_cmd = qq(/usr/lib/nagios/plugins/nagios_http_cronjob -n $name -C \\"$cmd\\");
  $remote_cmd .= " --freq " . $opts->freq if $opts->freq;
  $remote_cmd .= " --url "  . $opts->url  if $opts->url;
  $remote_cmd .= " --hostname "  . $opts->remote_hostname  if $opts->remote_hostname;
  print STDERR "+ Submitting remote cronjob with cmd: $remote_cmd\n" if $opts->verbose;
  my $out = qx(ssh -t $hostname $remote_cmd);
  print $out if $opts->verbose;
  sleep 1;

  # Retest data file
  return fetch_data($data_file);
}

